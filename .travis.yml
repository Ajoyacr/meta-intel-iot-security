language: c++
compiler: gcc
# Needed for setting up TAP devices during "bitbake -c testimage".
# Root access is not needed when running only compile jobs.
#sudo: required
#dist: trusty
# Workaround for caching issue (https://github.com/travis-ci/travis-ci/issues/4393):
# cache selection depends on compiler, but not env variables. In our test matrix
# we must use a fake compiler to get different caches.
matrix:
  include:
    - compiler: ": master"
      env: OE_CORE=master BITBAKE=master
    # - compiler: ": jethro"
    #   env: OE_CORE=jethro BITBAKE=1.28
    # - compiler: ": fido"
    #   env: OE_CORE=fido BITBAKE=1.26
    # - compiler: ": dizzy"
    #   env: OE_CORE=dizzy BITBAKE=1.24
  exclude:
    - compiler: gcc
addons:
  apt:
    packages:
    - s3cmd
    - diffstat
    - texinfo
    - chrpath
    # Not needed, sdl removed from qemu below.
    # - libsdl1.2-dev
install:
  - git clone --depth=1 --single-branch --branch=$OE_CORE git://git.openembedded.org/openembedded-core
  - ( cd openembedded-core && git clone --depth=1 --single-branch --branch=$BITBAKE git://git.openembedded.org/bitbake )
script:
  # The container environment has an limit of 2 hours per run. Everything else
  # only gets 50 minutes.
  #
  # If we get killed, our sstate will not be cached and we won't be faster
  # during the next invocation either. Therefore abort bitbake invocations
  # which take too long soon ourselves, and then let TravisCI cache the
  # updated sstate. We reserve 10 minutes for that (five was not enough
  # sometimes).
  - start=$(date +%s); if false; then duration=50; else duration=120; fi; deadline=$(( $start + $duration * 60 - 10 * 60 ))
  - env; uname -a
  - echo "Started on $(date --date=@$start), must end at $(date --date=@$deadline)."
  - pwd
  - echo $(df -B1048576 . | tail -1 | sed -e 's/[^ ]* *\([0-9]*\).*/\1/')
  - . openembedded-core/oe-init-build-env
  - pwd
  - sed -i -e "s;\(BBLAYERS.*\"\);\1 $(pwd)/../meta-security-smack $(pwd)/../meta-security-framework $(pwd)/../meta-integrity;" conf/bblayers.conf
  # Simplify qemu compilation.
  - echo 'PACKAGECONFIG_remove_pn-qemu-native = "sdl"' >>conf/local.conf
  - echo 'ASSUME_PROVIDED_remove = "libsdl-native"' >>conf/local.conf
  - echo 'DISTRO_FEATURES = "${DISTRO_FEATURES_DEFAULT} ${DISTRO_FEATURES_LIBC} systemd pam smack dbus-cynara ima"' >>conf/local.conf
  - echo 'VIRTUAL-RUNTIME_init_manager = "systemd"' >>conf/local.conf
  - echo 'DISTRO_FEATURES_BACKFILL_CONSIDERED = "sysvinit"' >>conf/local.conf
  - echo 'VIRTUAL-RUNTIME_initscripts = ""' >>conf/local.conf
  - echo 'CORE_IMAGE_EXTRA_INSTALL_append-pn-core-image-minimal = "security-manager cynara app-runas"' >>conf/local.conf
  - echo 'INHERIT_append-pn-core-image-minimal = " ima-evm-rootfs"' >>conf/local.conf
  # Use Amazon S3 bucket as sstate cache if available.
  - if [ -n "$AWS_BUCKET" ]; then echo "SSTATE_MIRRORS = \"file://.* http://$AWS_BUCKET.s3-website-${AWS_BUCKET_REGION:-us-east-1}.amazonaws.com/PATH\"" >>conf/local.conf; fi
  # Need to monitor less directories (it is all one file system) and
  # can accept lower security margins, because a failure is not that
  # critical.
  - echo 'BB_DISKMON_DIRS = " STOPTASKS,/tmp,500M,10K STOPTASKS,${DL_DIR},500M,10K ABORT,/tmp,100M,1K ABORT,${DL_DIR},100M,1K"' >>conf/local.conf
  # Required to avoid running out of disk space during the build.
  - echo 'INHERIT += "rm_work_and_downloads"' >>conf/local.conf
  - mkdir classes
  - cp ../scripts/rm_work_and_downloads.bbclass classes
  # Even with rm_work in place, running too many tasks in parallel can
  # cause the disk to overflow temporarily and/or trigger the
  # out-of-memory killer, so we allow only two tasks.  The default is
  # too large because /proc/cpuinfo is misleading: it seems to show
  # all CPUs on the host, although in reality (?) the environments only have
  # two, according to
  # http://docs.travis-ci.com/user/ci-environment/#Virtualization-environments
  # The Trusty Beta environment has more RAM and thus can afford more parallelism.
  - ( if true; then echo 'BB_NUMBER_THREADS = "2"'; echo 'PARALLEL_MAKE = "-j4"'; else echo 'BB_NUMBER_THREADS = "4"'; echo 'PARALLEL_MAKE = "-j8"'; fi ) >>conf/local.conf
  # Dump our local.conf for debugging.
  - tail -50 conf/local.conf
  - mkdir -p $HOME/sstate-cache
  - ln -s $HOME/sstate-cache .
  - du -h $HOME | grep '^[0-9\.]\+G'
  - df -h .; du -h -s * $HOME/sstate-cache
  # Remove .rvm to free up space. This can only be done when we do not depend anymore
  # on TravisCI add-ons like "deploy" or "artifacts", because those are implemented in
  # Ruby.
  - rm -rf $HOME/.rvm
  - df -h .
  # By building incrementally more pieces, we get some more insight
  # into what works and what does not and we have the chance to remove
  # the downloads (which can be quite big, compared to the 16GB
  # available to us).
  #
  # Setup native build tools first.
  #- ../scripts/travis-cmd-wrapper.py --deadline=$deadline bitbake m4
  #- df -h .
  #- rm -rf downloads
  #- df -h .; du -h -s * $HOME/sstate-cache
  # Kernel is big, build separately.
  # - ../scripts/travis-cmd-wrapper.py --deadline=$deadline bitbake linux-yocto
  # - df -h .
  # - (du -h -c -s $(ls -1 -d downloads/* downloads/git2/* | grep -v -e '.done$' -e '/git2$')) || true
  # - rm -rf downloads
  # - (df -h .; du -h -s * $HOME/sstate-cache) || true
  # And now the real thing. # core-image-minimal app-runas mmap-smack-test tcp-smack-test udp-smack-test
  - ../scripts/travis-cmd-wrapper.py --deadline=$deadline bitbake m4-native  || BITBAKE_RESULT=1
  - df -h .
  - (du -h -c -s $(ls -1 -d downloads/* downloads/git2/* | grep -v -e '.done$' -e '/git2$')) || true
  - (df -h .; du -h -s * $HOME/sstate-cache) || true
  # temp files are preserved, but should not be that large.
  - du -h -c -s tmp*/work/*/*/*/temp | tail -1
  # Copy new sstate files to S3 bucket.
  - $TRAVIS_BUILD_DIR/scripts/sstate2s3.sh
  # Finally! Running tests.
  - tests=$(echo $(ls -1 ../*/lib/oeqa/runtime/*.py | grep -v __init__.py | sed -e 's;.*/\(.*\)\.py;\1;'))
  - echo $tests
  - echo 'INHERIT += "testimage"' >>conf/local.conf
  - echo "TEST_SUITES = \"ssh $tests\"" >>conf/local.conf
  - xvfb-run ../scripts/travis-cmd-wrapper.py --deadline=$deadline -- bitbake -c testimage core-image-minimal || TEST_RESULT=1
  - for i in tmp*/work/*/core-image-minimal/*/temp/log.do_testimage tmp*/work/*/core-image-minimal/*/testimage/*log; do if [ -e $i ]; then echo "**** $i ****"; cat $i; fi; done
  # Restore build result to "failed" if we had to suppress the result
  # of some of the bitbake runs.
  - echo "TravisCI result $TRAVIS_TEST_RESULT, build result ${BITBAKE_RESULT:-0}, test result ${TEST_RESULT:-0}"; if [ $TRAVIS_TEST_RESULT -eq 0 ] && ( [ "$BITBAKE_RESULT" ] || [ "$TEST_RESULT" ] ); then TRAVIS_TEST_RESULT=1; false; fi
